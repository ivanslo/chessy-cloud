import * as cdk from "@aws-cdk/core";
import * as s3 from "@aws-cdk/aws-s3";
import * as dynamodb from "@aws-cdk/aws-dynamodb";
import * as sqs from "@aws-cdk/aws-sqs";
import * as lambda from "@aws-cdk/aws-lambda";
import * as lambdaNodeJs from "@aws-cdk/aws-lambda-nodejs";
import * as apigateway from "@aws-cdk/aws-apigateway";
import * as iam from "@aws-cdk/aws-iam";
import * as lambdaEventSource from "@aws-cdk/aws-lambda-event-sources";
import * as path from "path";

/*** IMPORTANT:
The ChessyCloudStack assumes the following lambda codes are present in s3 "arn:aws:s3:::chessy-lambda-functions":
- lambdaSplitter.zip
- lambdaParserPartial.zip
- lambdaFailer.zip

Which are the generated by [chessy-game-parser](https://github.com/ivanslo/chessy-game-parser).

(Yes, that process should be part of this but, you know...)
*/
export class ChessyCloudStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, { ...props });

    /* S3 Bucket
    --------------------*/
    const s3PGNFiles = new s3.Bucket(this, "chessy-pgn-files", {
      bucketName: "chessy-pgn-files",
      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      autoDeleteObjects: true,
    });

    /* Dynamodb tables
    --------------------*/
    const dbtable = (ctx: any, name: string) => {
      return new dynamodb.Table(ctx, name, {
        tableName: name,
        partitionKey: { name: "id", type: dynamodb.AttributeType.STRING },
        billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
        removalPolicy: cdk.RemovalPolicy.DESTROY,
      });
    };
    const dbtable_games = dbtable(this, "chessy_games");
    const dbtable_games_failed = dbtable(this, "chessy_games_failed");
    const dbtable_games_succeeded = dbtable(this, "chessy_games_succeeded");
    const dbtable_pgn_files_failed = dbtable(this, "chessy_pgn_files_failed");
    const dbtable_pgn_files_succeeded = dbtable(
      this,
      "chessy_pgn_files_succeeded"
    );

    /* SQS Queues
    --------------------*/
    const deadLetterQueue = new sqs.Queue(this, "chessy-pgn-games-failed-dlq", {
      queueName: "chessy-pgn-games-failed-dlq",
      removalPolicy: cdk.RemovalPolicy.DESTROY,
    });

    const gamesToProcessQueue = new sqs.Queue(
      this,
      "chessy-pgn-games-to-process",
      {
        queueName: "chessy-pgn-games-to-process",
        visibilityTimeout: cdk.Duration.minutes(2),
        deadLetterQueue: {
          maxReceiveCount: 2,
          queue: deadLetterQueue,
        },
        removalPolicy: cdk.RemovalPolicy.DESTROY,
      }
    );

    /* Lambda Functions
    --------------------*/
    const LAMBDA_FUNCTIONS_S3 = {
      name: "chessy-lambda-functions",
      arn: "arn:aws:s3:::chessy-lambda-functions",
    };

    const s3LambdaFunctions = s3.Bucket.fromBucketArn(
      this,
      LAMBDA_FUNCTIONS_S3.name,
      LAMBDA_FUNCTIONS_S3.arn
    );

    const lambdaCommonProps: Partial<lambda.FunctionProps> = {
      memorySize: 128,
      runtime: lambda.Runtime.PYTHON_3_8,
      currentVersionOptions: {
        removalPolicy: cdk.RemovalPolicy.DESTROY,
      },
    };

    // -- Splitter
    const lambdaSplitter = new lambda.Function(this, "chessy-splitter", {
      ...(lambdaCommonProps as lambda.FunctionProps),
      functionName: "chessy-splitter",
      description:
        "Split big PGN files into chunks with a fixed amount of games",
      timeout: cdk.Duration.seconds(13),
      handler: "lambda_ChessyPGNSplitter.lambda_handler",
      code: lambda.Code.fromBucket(s3LambdaFunctions, "lambdaSplitter.zip"),
      environment: {
        LOG_LEVEL: "3",
        SQS_URL: gamesToProcessQueue.queueUrl,
      },
    });

    s3PGNFiles.grantRead(lambdaSplitter);
    const s3PGNFilesEventSource = new lambdaEventSource.S3EventSource(
      s3PGNFiles,
      { events: [s3.EventType.OBJECT_CREATED] }
    );
    lambdaSplitter.addEventSource(s3PGNFilesEventSource);
    gamesToProcessQueue.grantSendMessages(lambdaSplitter);

    // -- Parser
    const lambdaParser = new lambda.Function(this, "chessy-parser-partial", {
      ...(lambdaCommonProps as lambda.FunctionProps),
      functionName: "chessy-parser-partial",
      description: "Process a chunk of a PGN file",
      timeout: cdk.Duration.seconds(30),
      handler: "lambda_ChessyPGNParserPartial.lambda_handler",
      code: lambda.Code.fromBucket(
        s3LambdaFunctions,
        "lambdaParserPartial.zip"
      ),
      environment: {
        LOG_LEVEL: "3",
        TABLE_CHESS_GAMES: dbtable_games.tableName,
        TABLE_CHESS_GAMES_FAILED: dbtable_games_failed.tableName,
        TABLE_PGN_FILES_FAILED: dbtable_pgn_files_failed.tableName,
        TABLE_PGN_FILES_SUCCEEDED: dbtable_pgn_files_succeeded.tableName,
      },
    });

    s3PGNFiles.grantRead(lambdaParser);
    gamesToProcessQueue.grantConsumeMessages(lambdaParser);
    const sqsPGNGamesEventSource = new lambdaEventSource.SqsEventSource(
      gamesToProcessQueue,
      {
        batchSize: 1,
      }
    );
    lambdaParser.addEventSource(sqsPGNGamesEventSource);

    dbtable_games.grantWriteData(lambdaParser);
    dbtable_games_failed.grantWriteData(lambdaParser);
    dbtable_games_succeeded.grantWriteData(lambdaParser);
    dbtable_pgn_files_failed.grantWriteData(lambdaParser);
    dbtable_pgn_files_succeeded.grantWriteData(lambdaParser);

    // -- Failer
    const lambdaFailer = new lambda.Function(this, "chessy-failer", {
      ...(lambdaCommonProps as lambda.FunctionProps),
      functionName: "chessy-failer",
      description:
        "Process the messages in the DLQ, consuming them while recording them in the DB",
      timeout: cdk.Duration.seconds(8),
      handler: "lambda_ChessyPGNFailedProcess.lambda_handler",
      code: lambda.Code.fromBucket(s3LambdaFunctions, "lambdaFailer.zip"),
      environment: {
        LOG_LEVEL: "3",
        TABLE_PGN_FILES_FAILED: dbtable_pgn_files_succeeded.tableName,
      },
    });

    deadLetterQueue.grantConsumeMessages(lambdaFailer);
    const sqsDLQEventSource = new lambdaEventSource.SqsEventSource(
      deadLetterQueue
    );
    lambdaFailer.addEventSource(sqsDLQEventSource);

    dbtable_pgn_files_failed.grantWriteData(lambdaFailer);

    /* API Gateway
    --------------------*/
    const apiGtwRest = new apigateway.RestApi(this, "chessy-rest", {
      restApiName: "chessy-rest",
      description: "Manage data for chessy project",
      deploy: true,
      defaultCorsPreflightOptions: {
        allowOrigins: apigateway.Cors.ALL_ORIGINS,
        allowMethods: apigateway.Cors.ALL_METHODS,
      },
    });

    const getRole = new iam.Role(this, "getRole", {
      assumedBy: new iam.ServicePrincipal("apigateway.amazonaws.com"),
    });
    getRole.attachInlinePolicy(
      new iam.Policy(this, "getlistPolicy", {
        statements: [
          new iam.PolicyStatement({
            actions: ["dynamodb:GetItem", "dynamodb:Scan", "dynamodb:Query"],
            effect: iam.Effect.ALLOW,
            resources: [dbtable_games.tableArn],
          }),
        ],
      })
    );

    const integrationResponsesArray: apigateway.IntegrationResponse[] = [
      {
        statusCode: "200",
        responseParameters: {
          "method.response.header.Access-Control-Allow-Origin": "'*'", // Needed for CORS
        },
      },
      {
        selectionPattern: "400",
        statusCode: "400",
        responseTemplates: {
          "application/json": `{
            "error": "#400 - Client Error"
          }`,
        },
      },
      {
        selectionPattern: "5\\d{2}",
        statusCode: "500",
        responseTemplates: {
          "application/json": `{
            "error": "Internal Service Error"
          }`,
        },
      },
    ];

    const methodOptions: apigateway.MethodOptions = {
      methodResponses: [
        {
          statusCode: "200",
          responseParameters: {
            "method.response.header.Access-Control-Allow-Origin": true, // Needed for CORS
          },
        },
        { statusCode: "400" },
        { statusCode: "500" },
      ],
    };

    // Get All Games
    const dynamodbintegration = new apigateway.AwsIntegration({
      action: "Scan",
      region: "eu-west-2",
      service: "dynamodb",
      options: {
        credentialsRole: getRole,
        integrationResponses: integrationResponsesArray,
        requestTemplates: {
          "application/json": `{
              "TableName": "${dbtable_games.tableName}",
              "ProjectionExpression": "id, Black, White, Event, #r",
              "ExpressionAttributeNames":{"#r": "Result"}
          }`,
        },
      },
    });
    const resource = apiGtwRest.root.addResource("getallgames_");
    resource.addMethod("POST", dynamodbintegration, methodOptions);

    // Get Game
    const dynamodbintegrationGG = new apigateway.AwsIntegration({
      action: "GetItem",
      region: "eu-west-2",
      service: "dynamodb",
      options: {
        credentialsRole: getRole,
        integrationResponses: integrationResponsesArray,
        requestTemplates: {
          "application/json": `{
            "TableName": "${dbtable_games.tableName}",
            "Key": { "id":{"S": "$input.path('$.gameId')"}}
          }`,
        },
      },
    });
    const resourceGG = apiGtwRest.root.addResource("getgame_");
    resourceGG.addMethod("POST", dynamodbintegrationGG, methodOptions);

    /* API Gateway + Lambda Integration  (approach #2)
    ------------------------------------*/
    const getAllGamesFn = new lambdaNodeJs.NodejsFunction(
      this,
      "get-all-games-lambda-fn",
      {
        functionName: "get-all-games-lambda-fn",
        timeout: cdk.Duration.seconds(5),
        runtime: lambda.Runtime.NODEJS_14_X,
        handler: "main",
        entry: path.join(__dirname, `../lambdasFn/getAllGames.ts`),
        bundling: {
          minify: true,
          externalModules: ["aws-sdk", "aws-lambda"],
        },
      }
    );

    dbtable_games.grantReadData(getAllGamesFn);

    const apiGtwRest2 = new apigateway.RestApi(this, "chessy-rest-2", {
      restApiName: "chessy-rest-2",
      description: "Manage endpoint for chessy project",
      deploy: true,
      defaultCorsPreflightOptions: {
        allowOrigins: apigateway.Cors.ALL_ORIGINS,
        allowMethods: apigateway.Cors.ALL_METHODS,
      },
    });
    const lambdaIntegration = new apigateway.LambdaIntegration(getAllGamesFn, {
      // requestTemplates: {"application/json": '{"statusCode":"200"}'},
      integrationResponses: integrationResponsesArray,
    });
    const res = apiGtwRest2.root.addResource("games");
    res.addMethod("GET", lambdaIntegration, methodOptions);
  }
}
